# ROS2 Docker Exercise: Cross-Language Temperature Monitor

## Overview
A distributed ROS2 system using Docker containers where a Python node publishes simulated temperature readings and a C++ node subscribes, processes, and displays temperature statistics. The system includes web-based visualization, database persistence, and comprehensive monitoring tools.

## Features
### ‚úÖ Core Functionality

- Python temperature publisher with realistic data simulation
- C++ subscriber with moving average, min/max tracking, and trend detection
- Custom TemperatureReading message type with full metadata

### üîß Advanced Features

- Docker Compose orchestration with custom bridge network
- QoS profiles for reliable communication
- Graceful shutdown handling with signal handlers
- Multi-level logging (INFO, WARN, ERROR)

### üåê Web Visualization

- Real-time charts using Chart.js
- Historical data viewer with time range selection
- Live statistics dashboard
- WebSocket server bridging ROS2 to web clients

### üíæ Data Persistence

- PostgreSQL database container
- Automatic schema initialization
- Data insertion from Python node
- Statistical views for analytics

### üß™ Testing & Monitoring

- Unit tests for both Python and C++ nodes
- Database integration tests
- Code coverage reporting (Python & C++)
- Continuous monitoring dashboard
- Comprehensive debug tool

### Prerequisites
- Docker and Docker Compose
- Python 3.8+
- Git
- Web browser for visualization

## Quick Start
1. Clone the repository
```bash
git clone git@github.com:ahmedosama07/robotics-software-community.git
cd robotics-software-community/1-temperature-monitor
```
2. Build and run the system
```bash
docker compose up --build
```

3. Access the interfaces
- Web Dashboard: http://localhost:8080
- Debug Tool: http://localhost:8080/debug.html
- ROS2 Nodes: Automatically connected via Docker network

## Makefile Commands
The system provides a comprehensive Makefile for easy management:
```bash
# Build all containers
make build

# Run the complete system
make run

# Run all tests
make test

# Run Python unit tests
make test-python

# Run C++ unit tests  
make test-cpp

# Run database integration tests
make test-db

# Generate coverage reports
make coverage

# View coverage report URLs
make coverage-report

# Clean build artifacts
make clean

# Show all available commands
make help
```

## Configuration
### Python Publisher Parameters
Configured in `launch/temperature_system.launch.py`:

- `frequency`: Publishing frequency in Hz (default: 1.0)
- `temp_range`: Temperature variation range (default: 30.0)
- `sensor_id`: Unique sensor identifier (default: 'sensor_001')
- `base_temp`: Base temperature in ¬∞C (default: 20.0)
- `location`: Sensor location (default: 'lab')

### C++ Subscriber Settings
- Moving average window: 10 readings
- Temperature warning thresholds: < 10¬∞C or > 35¬∞C
- Statistics update interval: 5 seconds

### Web Interface
The web interface provides three main views:

1. **Live Data (index.html)**
- Real-time temperature chart
- Current sensor readings
- Connection status indicators

2. **Historical Data**
- Time-range selection
- Table of recent readings
- Hourly averages

3. **Statistics Dashboard**
- Sensor performance metrics
- Reading count and averages
- Min/max temperatures

### Database Schema
The PostgreSQL database includes:

**Table**: `temperature_readings`

- `id`: Serial primary key
- `sensor_id`: VARCHAR(100)
- `temperature`: DOUBLE PRECISION
- `humidity`: DOUBLE PRECISION
- `unit`: VARCHAR(20)
- `location`: VARCHAR(200)
- `timestamp`: TIMESTAMPTZ with default

**Indexes**:

- `idx_sensor_id`: Performance optimization
- `idx_timestamp`: Time-based queries
- `idx_sensor_timestamp`: Combined queries

**Views**:

- `recent_readings`: Last 24 hours of data
- `sensor_statistics`: Aggregated statistics by senso

## Development
### Debugging
Use the debug tool at /debug.html to diagnose:

- Docker container connectivity
- Network configuration
- ROS2 topic discovery
- Database connection status
- WebSocket functionality

### Code Coverage
Coverage reports are generated in:

- Python: `coverage/html/python/index.html`
- C++: `coverage/html/cpp/index.html`

## Troubleshooting
### Common Issues
1. Containers not communicating

- Verify all containers are on the same network
- Check `ROS_DOMAIN_ID=42` is set consistently
- Ensure firewall isn't blocking Docker ports

2. Web interface not loading

- Wait 30 seconds for containers to initialize
- Check if `web-visualizer` container is running
- Verify port 8080 is available

3. Database connection errors

- Check if `temperature-db` container is healthy
- Verify database credentials in Python node
- Run make `test-db` to diagnose